# Dockerfile Monorepo - Frontend + Backend para EasyPanel
FROM node:18-alpine as frontend-build

# Instalar depend√™ncias do sistema
RUN apk add --no-cache git

# Criar diret√≥rio de trabalho
WORKDIR /app

# Copiar arquivos de depend√™ncias do frontend
COPY package*.json ./

# Instalar depend√™ncias do frontend (incluindo devDependencies para build)
RUN npm ci --silent

# Copiar c√≥digo fonte do frontend
COPY src/ ./src/
COPY public/ ./public/
COPY index.html ./
COPY vite.config.ts ./
COPY tsconfig*.json ./
COPY tailwind.config.ts ./
COPY postcss.config.js ./
COPY landing-page.html ./

# Configurar vari√°veis de ambiente para build
ARG VITE_API_URL="/api"
ENV VITE_API_URL=$VITE_API_URL

# Build da aplica√ß√£o frontend
RUN npm run build

# Est√°gio de produ√ß√£o
FROM node:18-alpine

# Instalar depend√™ncias do sistema
RUN apk add --no-cache nginx wget dumb-init netcat-openbsd

# Criar diret√≥rios necess√°rios
WORKDIR /app

# Copiar arquivos buildados do frontend
COPY --from=frontend-build /app/dist /usr/share/nginx/html
COPY --from=frontend-build /app/landing-page.html /usr/share/nginx/html/

# Copiar backend
COPY backend/package*.json ./backend/
WORKDIR /app/backend
RUN npm ci --only=production --silent && npm cache clean --force

COPY backend/src/ ./src/
COPY backend/*.html ./

# Configura√ß√£o do Nginx (limpar configs antigas e usar nova)
RUN rm -f /etc/nginx/conf.d/default.conf /etc/nginx/sites-enabled/default
COPY nginx.minimal.conf /etc/nginx/nginx.conf

# Criar usu√°rio n√£o-root
RUN addgroup -g 1001 -S appuser && \
    adduser -S appuser -u 1001 -G appuser

# Criar diret√≥rios nginx e ajustar permiss√µes
RUN mkdir -p /var/cache/nginx /var/run/nginx /var/log/nginx /var/lib/nginx/logs
RUN touch /var/log/nginx/access.log /var/log/nginx/error.log
RUN chown -R appuser:appuser /app /usr/share/nginx/html /var/cache/nginx /var/run/nginx /var/log/nginx /var/lib/nginx
RUN chmod -R 755 /usr/share/nginx/html

# Script de inicializa√ß√£o
COPY <<EOF /app/start.sh
#!/bin/sh
echo "üöÄ Starting InteliZap services..."

# Mostrar vari√°veis de ambiente importantes
echo "üìã Environment check:"
echo "  DB_HOST: \$DB_HOST"
echo "  DB_PORT: \$DB_PORT" 
echo "  DB_NAME: \$DB_NAME"
echo "  DB_USER: \$DB_USER"
echo "  CORS_ORIGIN: \$CORS_ORIGIN"

# Iniciar backend e capturar logs
echo "üì° Starting backend on port 3001..."
cd /app/backend
PORT=3001 node src/server.js &
BACKEND_PID=\$!

# Aguardar e monitorar backend
echo "‚è≥ Waiting for backend to start..."
for i in \$(seq 1 30); do
    if nc -z localhost 3001 2>/dev/null; then
        echo "‚úÖ Backend is ready on port 3001"
        break
    fi
    echo "‚è±Ô∏è  Waiting for backend... (\$i/30)"
    sleep 2
    
    # Verificar se backend morreu
    if ! kill -0 \$BACKEND_PID 2>/dev/null; then
        echo "‚ùå Backend crashed!"
        exit 1
    fi
done

# Verificar se conectou
if ! nc -z localhost 3001 2>/dev/null; then
    echo "‚ùå Backend not responding on port 3001"
    exit 1
fi

# Testar configura√ß√£o do nginx
echo "üîß Testing nginx configuration..."
nginx -t

if [ $? -ne 0 ]; then
    echo "‚ùå Nginx configuration test failed!"
    exit 1
fi

# Iniciar nginx
echo "üåê Starting nginx on port 3000..."
nginx -g 'daemon off;' &
NGINX_PID=$!

# Aguardar nginx iniciar
echo "‚è≥ Waiting for nginx to start..."
for i in $(seq 1 10); do
    if nc -z localhost 3000 2>/dev/null; then
        echo "‚úÖ Nginx is ready on port 3000"
        break
    fi
    echo "‚è±Ô∏è  Waiting for nginx... ($i/10)"
    sleep 1
    
    # Verificar se nginx morreu
    if ! kill -0 $NGINX_PID 2>/dev/null; then
        echo "‚ùå Nginx crashed! Error logs:"
        cat /var/log/nginx/error.log
        exit 1
    fi
done

# Verificar se nginx est√° respondendo
if ! nc -z localhost 3000 2>/dev/null; then
    echo "‚ùå Nginx not responding on port 3000"
    echo "üìã Nginx error logs:"
    cat /var/log/nginx/error.log
    exit 1
fi

echo "üéâ All services started successfully!"

# Aguardar processos e mostrar logs em tempo real
echo "üìã Following application logs..."
tail -f /var/log/nginx/access.log &
wait
EOF

RUN chmod +x /app/start.sh && chown appuser:appuser /app/start.sh

# Usar usu√°rio n√£o-root
USER appuser

# Expor portas
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3000/ || exit 1

# Usar dumb-init para melhor handling de sinais
ENTRYPOINT ["dumb-init", "--"]

# Comando para iniciar ambos os servi√ßos
CMD ["/app/start.sh"]